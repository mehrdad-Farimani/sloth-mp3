#include <Wire.h>
#include <MPU6050.h>
#include <WiFi.h>
#include <Audio.h>
#include <ESP32Servo.h>

const char* ssid = "Skeppstedt";
const char* password = "Torsk_44!";

const char* sleepSound = "https://github.com/mehrdad-Farimani/sloth-mp3/raw/main/sloth-inspired-sleep-sound-no16-151510.mp3";
const char* sitSound = "https://github.com/mehrdad-Farimani/sloth-mp3/raw/main/sloth-inspired-hi-sound-no9-124910.mp3";
const char* sideSound = "https://github.com/mehrdad-Farimani/sloth-mp3/raw/main/sloth-inspired-cuddle-sound-no4-124168.mp3";
const char* moveSound = "https://github.com/mehrdad-Farimani/sloth-mp3/raw/main/sloth-inspired-imaginary-sound-no13-124915.mp3";
const char* fallSound = "https://github.com/mehrdad-Farimani/sloth-mp3/raw/main/sloth-inspired-fall-sound-no1-124165.mp3";
const char* touchSounds[] = {
  "https://github.com/mehrdad-Farimani/sloth-mp3/raw/main/Heee.mp3",
  "https://github.com/mehrdad-Farimani/sloth-mp3/raw/main/Oy-Oy.mp3",
  "https://github.com/mehrdad-Farimani/sloth-mp3/raw/main/sloth-inspired-hi-sound-no9-124910.mp3",
  "https://github.com/mehrdad-Farimani/sloth-mp3/raw/main/sloth-inspired-imaginary-sound-no13-124915.mp3",
  "https://github.com/mehrdad-Farimani/sloth-mp3/raw/main/sloth-inspired-sleep-sound-no16-151510.mp3"
};
const char* cuddleSounds[] = {
  "https://github.com/mehrdad-Farimani/sloth-mp3/raw/main/Its-gonna-be-alrigh.mp3",
  "https://github.com/mehrdad-Farimani/sloth-mp3/raw/main/sloth-inspired-cuddle-sound-no4-124168.mp3",
  "https://github.com/mehrdad-Farimani/sloth-mp3/raw/main/I-am-Boo.mp3"
};
const char* wakeUpSound = "https://github.com/mehrdad-Farimani/sloth-mp3/raw/main/I-am-Boo.mp3";

Audio audio;

// Define MPU6050 and thresholds
MPU6050 mpu;
const float orientationThreshold = 35.0; // Degrees tolerance for orientations
const int fallThreshold = 21000; // Threshold for detecting falls

// GPIO pins for the servos
#define SERVO_PIN1 6
#define SERVO_PIN2 7
#define SERVO_PIN3 8

Servo servo1; // head
Servo servo2; // left arm
Servo servo3; // right arm

// GPIO pins for touch sensors
#define TOUCH_SENSOR_PIN1 42 // Head
#define TOUCH_SENSOR_PIN2 33 // Spine
#define TOUCH_SENSOR_PIN3 26 // Belly

// GPIO pin for vibration motor
#define VIBRATION_MOTOR_PIN 5

// GPIO pins for MPU6050 (IMU)
#define MPU6050_SCL 15
#define MPU6050_SDA 16

// State variables
bool touchingHead = false;
bool touchingSpine = false;
bool touchingBelly = false;

// Sleep mode timeout
unsigned long lastActivityTime = 0;
const unsigned long sleepTimeout = 40000; // 20 seconds

unsigned long lastSitSoundTime = 0;
const unsigned long sitSoundCooldown = 20000; // 20 seconds

unsigned long lastSideSoundTime = 0;
const unsigned long sideSoundCooldown = 20000; // 20 seconds

unsigned long lastWakeUpSoundTime = 0;
const unsigned long wakeUpSoundCooldown = 440000; // 2 minutes

void pulseVibrationMotor(unsigned long duration) {
  unsigned long startTime = millis();
  const unsigned long pulseDuration = 100; // Duration of each pulse in milliseconds
  const unsigned long pauseDuration = 500; // Duration of pause between pulses in milliseconds

  while (millis() - startTime < duration) {
    digitalWrite(VIBRATION_MOTOR_PIN, HIGH);
    delay(pulseDuration);
    digitalWrite(VIBRATION_MOTOR_PIN, LOW);
    delay(pauseDuration);
  }
}

void setup() {
  // Initialize servos
  servo1.attach(SERVO_PIN1);
  servo2.attach(SERVO_PIN2);
  servo3.attach(SERVO_PIN3);

  // Move servos to initial positions
  servo1.write(90);
  servo2.write(45);
  servo3.write(135);

  // Initialize touch sensors
  pinMode(TOUCH_SENSOR_PIN1, INPUT);
  pinMode(TOUCH_SENSOR_PIN2, INPUT);
  pinMode(TOUCH_SENSOR_PIN3, INPUT);

  // Initialize vibration motor
  pinMode(VIBRATION_MOTOR_PIN, OUTPUT);
  digitalWrite(VIBRATION_MOTOR_PIN, LOW); // Initially off

  // Initialize MPU6050
  Wire.begin(MPU6050_SDA, MPU6050_SCL);
  mpu.initialize();

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED) {
    if (millis() - startTime > 10000) { // 10 seconds timeout
      return;
    }
    delay(500);
  }

  // Configure I2S for the MAX98357A
  audio.setPinout(19, 20, 21);  // BCLK, LRC, DIN
  audio.setVolume(15);  // Volume control 0...21

  // Connect to the initial MP3 URL
  audio.connecttohost(wakeUpSound);
}

void loop() {
  audio.loop();

  // Read accelerometer and gyroscope data
  int16_t ax, ay, az;
  int16_t gx, gy, gz;
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

  // Calculate acceleration in g's
  float accel_x = ax / 16384.0;
  float accel_y = ay / 16384.0;
  float accel_z = az / 16384.0;

  // Calculate orientation (roll and pitch) in degrees
  float roll = atan2(accel_y, accel_z) * 180 / PI;
  float pitch = atan(-accel_x / sqrt(accel_y * accel_y + accel_z * accel_z)) * 180 / PI;

  // Check touch sensors
  touchingHead = digitalRead(TOUCH_SENSOR_PIN1);
  touchingSpine = digitalRead(TOUCH_SENSOR_PIN2);
  touchingBelly = digitalRead(TOUCH_SENSOR_PIN3);

  // Update last activity time if any interaction or movement is detected
  if (touchingHead || touchingSpine || touchingBelly || abs(ax) > 1000 || abs(ay) > 1000 || abs(az) > 1000) {
    lastActivityTime = millis();
  }

  // Determine current mode
  if (millis() - lastActivityTime > sleepTimeout) {
    playSound(sleepSound);
    disableServos();
    digitalWrite(VIBRATION_MOTOR_PIN, LOW);
  } else if (abs(roll - 90) <= orientationThreshold || abs(roll + 90) <= orientationThreshold) {
    if (millis() - lastSitSoundTime > sitSoundCooldown) {
      playSound(sitSound);
      delay(5000);
      lastSitSoundTime = millis();
    }
    moveServosRandomly(90, 45, 135); // Move servos to sitting positions with random movements
  } else if (touchingHead || touchingSpine || touchingBelly) {
    pulseVibrationMotor(5500);
    playRandomTouchSound();
    moveServosRandomly(90, 45, 135); // Move servos slightly
  } else if (touchingHead && touchingSpine && touchingBelly) {
    pulseVibrationMotor(5500);
    playRandomCuddleSound();
    moveServosRandomly(90, 45, 135); // Move servos slightly
    delay(5000); // Wait for 5 seconds before allowing another cuddle sound
  } else if (fallDetected(ax, ay, az)) {
    playSound(fallSound);
  } else if (millis() - lastWakeUpSoundTime > wakeUpSoundCooldown) {
    playSound(wakeUpSound);
    lastWakeUpSoundTime = millis();
    delay(5000);
  }

  delay(700); // delay as needed for reading frequency
}

void moveServosRandomly(int angle1, int angle2, int angle3) {
  unsigned long startTime = millis();
  int range = 45;

  // Get current positions
  int currentAngle1 = servo1.read();
  int currentAngle2 = servo2.read();
  int currentAngle3 = servo3.read();

  // Determine new target angles
  int targetAngle1 = constrain(currentAngle1 + random(-range, range), 70, 110);
  int targetAngle2 = constrain(currentAngle2 + random(-range, range), 15, 45);
  int targetAngle3 = constrain(currentAngle3 + random(-range, range), 155, 135);

  while (millis() - startTime < 5000) {
    for (int i = 0; i <= 100; i++) {
      int newAngle1 = currentAngle1 + (targetAngle1 - currentAngle1) * i / 100;
      int newAngle2 = currentAngle2 + (targetAngle2 - currentAngle2) * i / 100;
      int newAngle3 = currentAngle3 + (targetAngle3 - currentAngle3) * i / 100;

      servo1.write(newAngle1);
      servo2.write(newAngle2);
      servo3.write(newAngle3);
      delay(35); // Speed of movement
    }

    // Update current angles for the next target
    currentAngle1 = targetAngle1;
    currentAngle2 = targetAngle2;
    currentAngle3 = targetAngle3;

    // Set new target angles
    targetAngle1 = constrain(currentAngle1 + random(-range, range), 70, 110);
    targetAngle2 = constrain(currentAngle2 + random(-range, range), 15, 45);
    targetAngle3 = constrain(currentAngle3 + random(-range, range), 105, 135);
  }
}

void disableServos() {
  servo1.detach();
  servo2.detach();
  servo3.detach();
}

void playSound(const char* url) {
  audio.connecttohost(url);
  while (audio.isRunning()) {
    audio.loop();
  }
}

void playRandomTouchSound() {
  int index = random(0, sizeof(touchSounds) / sizeof(touchSounds[0]));
  playSound(touchSounds[index]);
}

void playRandomCuddleSound() {
  int index = random(0, sizeof(cuddleSounds) / sizeof(cuddleSounds[0]));
  playSound(cuddleSounds[index]);
}

bool fallDetected(int16_t ax, int16_t ay, int16_t az) {
  return (abs(ax) > fallThreshold || abs(ay) > fallThreshold || abs(az) > fallThreshold);
}
